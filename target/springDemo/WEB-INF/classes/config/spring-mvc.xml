<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 默认注册 DefaultAnnotationHandleMapping以及AnnotionMethodHandleAdapter 这两个 
		Bean, 这两个 Bean ，前者对应类级别， 后者对应到方法级别 -->
	<mvc:annotation-driven />

	<!-- 扫描controller（controller层注入） 主要作用于@Controller -->
	<context:component-scan base-package="com.xinux.test.controller" />

	<!-- 在HandlerMapping内配置拦截器(有错误) -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="handlerInterceptor1"/>
				<ref bean="handlerInterceptor2"/>
			</list>
		</property>
		<property name="mappings">
			<props>
				<prop key="/test">TestController</prop>
			</props>
		</property>
	</bean>

	<bean id="handlerInterceptor1" class="com.xinux.test.interceptor.HandlerInterceptor1"></bean>
	<bean id="handlerInterceptor2" class="com.xinux.test.interceptor.HandlerInterceptor2"></bean>
	<bean id="TestController" class="com.xinux.test.controller.TestController"></bean> -->
	
	<!-- Spring拦截器设置 -->
	<mvc:interceptors>
		<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
		<!-- <bean class="com.xinux.test.interceptor.AllInterceptor" /> -->
		<mvc:interceptor>
			<mvc:mapping path="/test/interceptor" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean id="handlerInterceptor1" class="com.xinux.test.interceptor.HandlerInterceptor1" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/test/interceptor" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean id="handlerInterceptor2" class="com.xinux.test.interceptor.HandlerInterceptor2" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/test/interceptor" />
			<!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
			<bean id="timeoutInterceptor" class="com.xinux.test.interceptor.TimeOutInterceptor" >
				<property name="beginWrk">
                    <value>1</value>
                </property>
				<property name="endWrk">
                    <value>12</value>
                </property>
                <property name="redirectUrl">
                    <value>http://localhost:8080/springDemo/static/timeout</value>
                </property>
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/UserController/login" />
			<!-- 登录检查Interceptor -->
			<bean id="checkLoginInterceptor" class="com.xinux.test.interceptor.CheckLoginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- <mvc:resources mapping="/static/**" location="/WEB-INF/jsp/"/> 静态资源因为没有相应的Controller就会被default 
		servlet处理 <mvc:default-servlet-handler/> -->

	<!-- Forwards requests to the "/index" resource to the "index" view -->
	<mvc:view-controller path="/index" view-name="index" />
	<mvc:view-controller path="/static/timeout" view-name="timeout" />

	<!--@Controller 声明Action组件 @Service 声明Service组件 @Service("myMovieLister") 
		@Repository 声明Dao组件 @Component 泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射 
		@Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") @Autowired 
		用于注入，(srping提供的) 默认按类型装配 @Transactional( rollbackFor={Exception.class}) 事务管理 
		@ResponseBody @Scope("prototype") 设定bean的作用域 -->

	<!-- 避免IE在ajax请求时，返回json出现下载 -->
	<bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 通过Url访问/WEB-INF/resources/目录下的静态资源 -->
	<mvc:resources mapping="/resources/**" location="/WEB-INF/resources/" />

	<!-- 视图解析类，对模型视图民称的解析，对模型视图添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/jsp/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	<!-- 处理JSON数据转换的 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 控制文件上传 needed because we require fileupload(user photo) -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
        <!-- the maximum file size in bytes -->
        <!-- 1 MB -->
        <property name="maxUploadSize" value="1048576" />
    </bean>
	
</beans>